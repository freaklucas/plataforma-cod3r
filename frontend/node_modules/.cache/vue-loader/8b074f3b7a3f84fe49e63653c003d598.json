{"remainingRequest":"/home/lucas/Documentos/plataforma-cod3r/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/lucas/Documentos/plataforma-cod3r/frontend/src/components/admin/UserAdmin.vue?vue&type=template&id=0c9160f8&","dependencies":[{"path":"/home/lucas/Documentos/plataforma-cod3r/frontend/src/components/admin/UserAdmin.vue","mtime":1629263816798},{"path":"/home/lucas/Documentos/plataforma-cod3r/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1627067198739},{"path":"/home/lucas/Documentos/plataforma-cod3r/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1627067200407},{"path":"/home/lucas/Documentos/plataforma-cod3r/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1627067198739},{"path":"/home/lucas/Documentos/plataforma-cod3r/frontend/node_modules/vue-loader/lib/index.js","mtime":1627067199971}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}