{"remainingRequest":"/home/lucas/Documentos/plataforma-cod3r/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/lucas/Documentos/plataforma-cod3r/frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/lucas/Documentos/plataforma-cod3r/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/lucas/Documentos/plataforma-cod3r/frontend/src/components/admin/UserAdmin.vue?vue&type=template&id=0c9160f8&","dependencies":[{"path":"/home/lucas/Documentos/plataforma-cod3r/frontend/src/components/admin/UserAdmin.vue","mtime":1630011642215},{"path":"/home/lucas/Documentos/plataforma-cod3r/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1630011622652},{"path":"/home/lucas/Documentos/plataforma-cod3r/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1630011623952},{"path":"/home/lucas/Documentos/plataforma-cod3r/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1630011622652},{"path":"/home/lucas/Documentos/plataforma-cod3r/frontend/node_modules/vue-loader/lib/index.js","mtime":1630011623628}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}